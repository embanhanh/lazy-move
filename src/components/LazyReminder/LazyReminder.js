import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  Animated,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { COLORS, SIZES } from "../../constants/theme";
import exercise1 from "../../../assets/imgs/exercise1.png";
import { useNavigation } from "@react-navigation/native";

const { width } = Dimensions.get("window");

const LazyReminder = () => {
  const navigation = useNavigation();
  const [visible, setVisible] = useState(false);
  const [currentReminder, setCurrentReminder] = useState(null);
  const scaleAnim = new Animated.Value(0);

  const reminders = [
    {
      title: "M·∫Øt m·ªèi r·ªìi ƒë√≥",
      message: "Nh·∫Øm m·∫Øt l·∫°i 20 gi√¢y th√¥i, ƒë·ª´ng l∆∞·ªùi nha üëÄ",
      exercise: "Th∆∞ gi√£n m·∫Øt",
      duration: "20 gi√¢y",
      points: "100 Lazy Points",
      image: exercise1,
      description:
        "B√†i t·∫≠p gi√∫p th∆∞ gi√£n m·∫Øt, gi·∫£m cƒÉng th·∫≥ng v√† tƒÉng tu·∫ßn ho√†n m√°u. Th·ª±c hi·ªán ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y s·∫Ω gi√∫p gi·∫£m ƒëau m·ªèi m·∫Øt, tƒÉng c∆∞·ªùng tu·∫ßn ho√†n m√°u v√† gi·∫£m stress hi·ªáu qu·∫£. B√†i t·∫≠p n√†y ƒë·∫∑c bi·ªát ph√π h·ª£p cho ng∆∞·ªùi l√†m vi·ªác vƒÉn ph√≤ng, th∆∞·ªùng xuy√™n ng·ªìi m·ªôt ch·ªó trong th·ªùi gian d√†i.",
    },
    {
      title: "Ng·ªìi l√¢u qu√° r·ªìi",
      message: "Xoay vai m·ªôt ch√∫t cho ƒë·ª° m·ªèi n√® ü¶æ",
      exercise: "Xoay vai",
      duration: "2 Ph√∫t",
      points: "200 Lazy Points",
      image: exercise1,
      description:
        "B√†i t·∫≠p gi√∫p th∆∞ gi√£n vai v√† c·ªï, gi·∫£m cƒÉng th·∫≥ng. Th·ª±c hi·ªán ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y s·∫Ω gi√∫p gi·∫£m ƒëau m·ªèi vai g√°y, tƒÉng c∆∞·ªùng tu·∫ßn ho√†n m√°u v√† gi·∫£m stress hi·ªáu qu·∫£. B√†i t·∫≠p n√†y ƒë·∫∑c bi·ªát ph√π h·ª£p cho ng∆∞·ªùi l√†m vi·ªác vƒÉn ph√≤ng, th∆∞·ªùng xuy√™n ng·ªìi m·ªôt ch·ªó trong th·ªùi gian d√†i.",
    },
    {
      title: "C·ªï tay c·ª©ng qu√°",
      message: "Xoay c·ªï tay v√†i c√°i cho m√°u ch·∫°y ƒë·ªÅu ü§ö",
      exercise: "Xoay c·ªï tay",
      duration: "2 Ph√∫t",
      points: "200 Lazy Points",
      image: exercise1,
      description:
        "B√†i t·∫≠p gi√∫p th∆∞ gi√£n vai v√† c·ªï, gi·∫£m cƒÉng th·∫≥ng. Th·ª±c hi·ªán ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y s·∫Ω gi√∫p gi·∫£m ƒëau m·ªèi vai g√°y, tƒÉng c∆∞·ªùng tu·∫ßn ho√†n m√°u v√† gi·∫£m stress hi·ªáu qu·∫£. B√†i t·∫≠p n√†y ƒë·∫∑c bi·ªát ph√π h·ª£p cho ng∆∞·ªùi l√†m vi·ªác vƒÉn ph√≤ng, th∆∞·ªùng xuy√™n ng·ªìi m·ªôt ch·ªó trong th·ªùi gian d√†i.",
    },
  ];

  const motivationalPhrases = [
    "Ch·ªâ c·∫ßn 2 ph√∫t th√¥i, d·ªÖ m√†! üåü",
    "L∆∞·ªùi c≈©ng ph·∫£i l∆∞·ªùi c√≥ k·ªπ thu·∫≠t ch·ª©! üòé",
    "Ngh·ªâ ng∆°i ƒë√∫ng c√°ch ƒë·ªÉ l∆∞·ªùi hi·ªáu qu·∫£ h∆°n üí™",
    "V·∫≠n ƒë·ªông t√≠ cho m√°u ch·∫°y ƒë·ªÅu n√®! üéØ",
  ];

  useEffect(() => {
    // Hi·ªÉn th·ªã reminder l·∫ßn ƒë·∫ßu sau 5s
    const initialTimer = setTimeout(() => {
      showReminder();
    }, 5000);

    // Sau ƒë√≥ c·ª© m·ªói 5s s·∫Ω hi·ªán l·∫°i
    const intervalTimer = setInterval(() => {
      showReminder();
    }, 5000);

    // Cleanup timers
    return () => {
      clearTimeout(initialTimer);
      clearInterval(intervalTimer);
    };
  }, []);

  const showReminder = () => {
    // Reset animation value
    scaleAnim.setValue(0);

    const randomReminder =
      reminders[Math.floor(Math.random() * reminders.length)];
    const randomPhrase =
      motivationalPhrases[
        Math.floor(Math.random() * motivationalPhrases.length)
      ];
    setCurrentReminder({
      ...randomReminder,
      motivationalPhrase: randomPhrase,
    });
    setVisible(true);

    Animated.sequence([
      // Hi·ªán overlay tr∆∞·ªõc
      Animated.timing(scaleAnim, {
        toValue: 0.3,
        duration: 150,
        useNativeDriver: true,
      }),
      // Sau ƒë√≥ scale reminder
      Animated.spring(scaleAnim, {
        toValue: 1,
        friction: 8,
        tension: 40,
        useNativeDriver: true,
      }),
    ]).start();

    // T·ª± ƒë·ªông ·∫©n sau 3s
    setTimeout(hideReminder, 4000);
  };

  const hideReminder = () => {
    Animated.timing(scaleAnim, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    }).start(() => {
      setVisible(false);
    });
  };

  const handleExercisePress = () => {
    hideReminder();
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn b√†i t·∫≠p t∆∞∆°ng ·ª©ng
    navigation.navigate("PracticeStack", {
      screen: "PracticeDetail",
      params: {
        title: currentReminder.exercise,
        description: currentReminder.message,
        duration: currentReminder.duration,
        points: currentReminder.points,
        image: currentReminder.image,
      },
    });
  };

  if (!visible) return null;

  return (
    <Animated.View style={[styles.overlay]}>
      <Animated.View style={[styles.container]}>
        <View style={styles.content}>
          <View style={styles.header}>
            <View style={styles.iconContainer}>
              <Ionicons name="fitness" size={28} color={COLORS.secondary} />
            </View>
            <Text style={styles.title}>{currentReminder.title}</Text>
          </View>
          <View style={styles.messageContainer}>
            <Text style={styles.message}>{currentReminder.message}</Text>
            <Text style={styles.motivationalPhrase}>
              {currentReminder.motivationalPhrase}
            </Text>
          </View>
          <View style={styles.rewardContainer}>
            <Ionicons name="star" size={20} color={COLORS.secondary} />
            <Text style={styles.rewardText}>
              Ho√†n th√†nh ngay + {currentReminder.points}
            </Text>
          </View>
          <View style={styles.buttonContainer}>
            <TouchableOpacity
              style={[styles.button, styles.laterButton]}
              onPress={hideReminder}
            >
              <Ionicons
                name="time-outline"
                size={20}
                color={COLORS.text.primary}
              />
              <Text style={styles.buttonTextLater}>ƒê·ªÉ l√∫c kh√°c</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.button, styles.exerciseButton]}
              onPress={handleExercisePress}
            >
              <Ionicons
                name="checkmark-circle"
                size={20}
                color={COLORS.text.primary}
              />
              <Text style={styles.buttonTextExercise}>L√†m lu√¥n</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Animated.View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  overlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "center",
    elevation: 1000,
    zIndex: 1000,
    backgroundColor: "rgba(0,0,0,0.5)",
  },
  container: {
    width: width - 40,
    backgroundColor: COLORS.card,
    borderRadius: SIZES.radius.medium,
    padding: SIZES.padding.large,
    elevation: 1001,
    zIndex: 1001,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  content: {
    gap: SIZES.padding.medium,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    gap: SIZES.padding.small,
  },
  title: {
    fontSize: SIZES.text.large,
    fontWeight: "bold",
    color: COLORS.text.primary,
  },
  messageContainer: {
    backgroundColor: COLORS.background,
    padding: SIZES.padding.medium,
    borderRadius: SIZES.radius.medium,
    gap: SIZES.padding.small,
  },
  message: {
    fontSize: SIZES.text.large,
    color: COLORS.text.primary,
    lineHeight: 24,
    textAlign: "center",
  },
  motivationalPhrase: {
    fontSize: SIZES.text.medium,
    color: COLORS.secondary,
    fontStyle: "italic",
    textAlign: "center",
  },
  rewardContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: SIZES.padding.small,
    backgroundColor: `${COLORS.secondary}20`,
    padding: SIZES.padding.small,
    borderRadius: SIZES.radius.medium,
  },
  rewardText: {
    fontSize: SIZES.text.medium,
    color: COLORS.secondary,
    fontWeight: "500",
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "flex-end",
    gap: SIZES.padding.medium,
    marginTop: SIZES.padding.small,
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: SIZES.padding.small,
    paddingVertical: SIZES.padding.medium,
    paddingHorizontal: SIZES.padding.large,
    borderRadius: SIZES.radius.medium,
    flex: 1,
  },
  laterButton: {
    backgroundColor: COLORS.background,
    borderWidth: 1,
    borderColor: COLORS.primary,
  },
  exerciseButton: {
    backgroundColor: COLORS.primary,
  },
  buttonTextLater: {
    color: COLORS.text.primary,
    fontSize: SIZES.text.medium,
  },
  buttonTextExercise: {
    color: COLORS.text.primary,
    fontSize: SIZES.text.medium,
    fontWeight: "bold",
  },
  iconContainer: {
    backgroundColor: `${COLORS.secondary}20`,
    padding: SIZES.padding.small,
    borderRadius: SIZES.radius.medium,
  },
});

export default LazyReminder;
